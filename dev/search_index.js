var documenterSearchIndex = {"docs":
[{"location":"OtherLoaders/#Other-Building-Loaders","page":"Loading Data","title":"Other Building Loaders","text":"","category":"section"},{"location":"OtherLoaders/#Introduction","page":"Loading Data","title":"Introduction","text":"","category":"section"},{"location":"OtherLoaders/","page":"Loading Data","title":"Loading Data","text":"Here we compile a list of convenience functions which load building footprints from different sources and prepare them for shadow casting.","category":"page"},{"location":"OtherLoaders/#API","page":"Loading Data","title":"API","text":"","category":"section"},{"location":"OtherLoaders/","page":"Loading Data","title":"Loading Data","text":"Pages = [\"OtherLoaders.md\"]","category":"page"},{"location":"OtherLoaders/","page":"Loading Data","title":"Loading Data","text":"Modules = [CompositeBuildings]\nPages = [\"OtherLoaders.jl\"]","category":"page"},{"location":"OtherLoaders/#CompositeBuildings.load_british_shapefiles-Tuple{Any}","page":"Loading Data","title":"CompositeBuildings.load_british_shapefiles","text":"load_british_shapefiles(path; bbox=nothing)\n\nloads the shapefiles of the largest cities in great britain, provided by emu analytics into dataframes, possibly clipping along a named tuple BoundingBox with names (minlon, minlat, maxlon, maxlat.\n\nReturns a dataframe with the columns given in the shapefile, with a few exceptions: :OBJECTID => :id, :MEAN_mean => :height_mean, :MIN_min => :height_min, :MAX_max => :height_max. Polygons are stored in the geometry column in EPSG 4326 crs.\n\nThe dataframe has metadata of center_lat and center_lon, representing the central latitude and longitude of the bounding Box, applied.\n\n\n\n\n\n","category":"method"},{"location":"ShadowCasting/#Shadow-Casting","page":"Shadow Casting","title":"Shadow Casting","text":"","category":"section"},{"location":"ShadowCasting/#Introduction","page":"Shadow Casting","title":"Introduction","text":"","category":"section"},{"location":"ShadowCasting/","page":"Shadow Casting","title":"Shadow Casting","text":"For buildings, we assume blocks of constant height across their footprint. The footprint is extruded upwards to this constant height and then projected onto the plane.","category":"page"},{"location":"ShadowCasting/#API","page":"Shadow Casting","title":"API","text":"","category":"section"},{"location":"ShadowCasting/","page":"Shadow Casting","title":"Shadow Casting","text":"Pages = [\"ShadowCasting.md\"]","category":"page"},{"location":"ShadowCasting/","page":"Shadow Casting","title":"Shadow Casting","text":"Modules = [CompositeBuildings]\nPages = [\"ShadowCasting.jl\"]","category":"page"},{"location":"ShadowCasting/#CompositeBuildings.cast_shadow-Tuple{Any, Any, AbstractArray}","page":"Shadow Casting","title":"CompositeBuildings.cast_shadow","text":"cast_shadow(buildings_df, height_key, sun_direction::AbstractArray)\n\ncreates new DataFrame with the shadows of the buildings in buildings_df with the height given in the column with height_key.\n\narguments\n\nbuildings_df: DataFrame with metadata of center_lat and center_lon and at least these columns:\ngeometry: ArchGDAL polygon in wsg84 crs (use apply_wsg_84! from CoolWalksUtils.jl)\nid: unique id for each building.\nheightkey: column with name given in parameter `heightkey`, containing the heights of the buildings.\nheight_key: name of column containing the height of the buildings\nsun_direction: direction of sun\n\n\n\n\n\n","category":"method"},{"location":"ShadowCasting/#CompositeBuildings.shadow_cleanup-Tuple{Any}","page":"Shadow Casting","title":"CompositeBuildings.shadow_cleanup","text":"Sometimes, due to numerical errors, the resulting shadows are no longer of polygon type, but might contain some (usually very short) lines or points. This function removes these artefacts and returns only the polygon contained in the shadow.\n\nshadow_cleanup(shadow)\n\nentry function for cleanup. dispatches on geomtrait of shadow.\n\nshadow_cleanup(::PolygonTrait, shadow)\n\nreturns shadow as it is.\n\nshadow_cleanup(::GeometryCollectionTrait, shadow)\n\nreturns the polygon in the shadow. If there is more than on polygon, or if there is at least one multi polygon it throws an ArgumentError. returns \n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CompositeBuildings","category":"page"},{"location":"#CompositeBuildings","page":"Home","title":"CompositeBuildings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CompositeBuildings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CompositeBuildings]\nPages = [\"relate_buildings.jl\"]","category":"page"},{"location":"#CompositeBuildings.relate_buildings","page":"Home","title":"CompositeBuildings.relate_buildings","text":"relate_buildings(df1, df2, id1= :id_1, id2= :id_2; overlap=0.7)\n\nconstructs a dataframe with two id columns, relating geometries from df1 and df2 which overlap at least overlap. Both dataframes are expected to have at least an :id and an :geometry column.\n\nBy setting id1 and id2, you can decide the names of the resulting columns for the two dataframes, respectively.\n\nTwo geometries g1, g2 are related, if: area(intersection(g1, g2)) >= min(area(g1), area(g2)) * overlap\n\n\n\n\n\n","category":"function"}]
}
