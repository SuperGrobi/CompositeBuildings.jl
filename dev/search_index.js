var documenterSearchIndex = {"docs":
[{"location":"SpainLoaders/#Spain-Building-Loaders-and-Utilities","page":"Loading Spain Buildings","title":"Spain Building Loaders and Utilities","text":"","category":"section"},{"location":"SpainLoaders/#Introduction","page":"Loading Spain Buildings","title":"Introduction","text":"","category":"section"},{"location":"SpainLoaders/","page":"Loading Spain Buildings","title":"Loading Spain Buildings","text":"Spain provides easy access to their cadastral dataset of building footprints and metadata. We provide some functions to inspect, download, preprocess and load the available data.","category":"page"},{"location":"SpainLoaders/","page":"Loading Spain Buildings","title":"Loading Spain Buildings","text":"The returned DataFrames conform to the requirements needed to be a source for building data.","category":"page"},{"location":"SpainLoaders/#Usage-example","page":"Loading Spain Buildings","title":"Usage example","text":"","category":"section"},{"location":"SpainLoaders/#API","page":"Loading Spain Buildings","title":"API","text":"","category":"section"},{"location":"SpainLoaders/","page":"Loading Spain Buildings","title":"Loading Spain Buildings","text":"Pages = [\"SpainLoaders.md\"]","category":"page"},{"location":"SpainLoaders/#Inspect-datasets","page":"Loading Spain Buildings","title":"Inspect datasets","text":"","category":"section"},{"location":"SpainLoaders/","page":"Loading Spain Buildings","title":"Loading Spain Buildings","text":"CurrentModule = CompositeBuildings","category":"page"},{"location":"SpainLoaders/","page":"Loading Spain Buildings","title":"Loading Spain Buildings","text":"parse_polygon_string\nparse_spain_xml\ndownload_spain_overview\ndownload_spain_region_overview","category":"page"},{"location":"SpainLoaders/#CompositeBuildings.parse_polygon_string","page":"Loading Spain Buildings","title":"CompositeBuildings.parse_polygon_string","text":"parse_polygon_string(polystring)\n\nparses a string of the form \"lat1 lon1 lat2 lon2...\" or \"lat1\\tlon1\\tlat2\\tlon2...\" into an ArchGDAL polygon.\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#CompositeBuildings.parse_spain_xml","page":"Loading Spain Buildings","title":"CompositeBuildings.parse_spain_xml","text":"parse_spain_xml(url)\n\nReads an XML Document from the Spanish Cadastral Dataset (see here for an example) and parses it into a dataframe containing information about the regions described within it.\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#CompositeBuildings.download_spain_overview","page":"Loading Spain Buildings","title":"CompositeBuildings.download_spain_overview","text":"download_spain_overview()\n\nDownloads and parses the xml file at https://www.catastro.minhap.es/INSPIRE/buildings/ES.SDGC.BU.atom.xml\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#CompositeBuildings.download_spain_region_overview","page":"Loading Spain Buildings","title":"CompositeBuildings.download_spain_region_overview","text":"download_spain_region_overview(region_id, spain_overview=download_spain_overview())\n\nDownloads and parses the xml corresponding to the region_id from the cadastral dataset. Can optionally take the result from download_spain_overview(), to reduce the number of server calls.\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#Download-and-process","page":"Loading Spain Buildings","title":"Download and process","text":"","category":"section"},{"location":"SpainLoaders/","page":"Loading Spain Buildings","title":"Loading Spain Buildings","text":"download_spain_subregion\nload_spain_buildings_gml\nload_spain_parts_gml\nrelate_floors\npreprocess_spain_subregion","category":"page"},{"location":"SpainLoaders/#CompositeBuildings.download_spain_subregion","page":"Loading Spain Buildings","title":"CompositeBuildings.download_spain_subregion","text":"download_spain_subregion(url, savepath)\n\nDownloads the zip file at url (element of download_spain_region_overview(...).url) to savepath.zip, extracts it to savepath/raw, and deletes the zip file.\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#CompositeBuildings.load_spain_buildings_gml","page":"Loading Spain Buildings","title":"CompositeBuildings.load_spain_buildings_gml","text":"load_spain_buildings_gml(path; extent=nothing)\n\nLoads the file at path with GeoDataFrames, and applies some transformations that only make sense if it is a buildings file from the spanish cadastral dataset.\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#CompositeBuildings.load_spain_parts_gml","page":"Loading Spain Buildings","title":"CompositeBuildings.load_spain_parts_gml","text":"load_spain_parts_gml(path; extent=nothing)\n\nLoads the file at path with GeoDataFrames, and applies some transformations that only make sense if it is a buildingparts file from the spanish cadastral dataset.\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#CompositeBuildings.relate_floors","page":"Loading Spain Buildings","title":"CompositeBuildings.relate_floors","text":"relate_floors(buildings, buildings_parts)\n\nInfers the number of floors a building in buildings might have, given the data present in its constituent buildings_parts by various different methods:\n\nnFloors_overlap: average number of floors in all parts, weighed by intersection area (overlap) between each part and the building.\nnFloors_approx: given area in the dataset divided by area of the footprint (myArea). Assumes that area is a \"usable area\".\nnFloors_part_approx: given area in the dataset divided by the total footprint-area of all parts (myArea_part). Assumes that the given area is some kind of \"usable area\".\nmaxFloors_part: maximum value of floors in all parts associated with building.\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#CompositeBuildings.preprocess_spain_subregion","page":"Loading Spain Buildings","title":"CompositeBuildings.preprocess_spain_subregion","text":"preprocess_spain_subregion(path; extent=nothing)\n\nLoads buildings and building parts form path/raw, and save the result of relate_floors(...) to path/buildings.geojson\n\n\n\n\n\n","category":"function"},{"location":"SpainLoaders/#Load","page":"Loading Spain Buildings","title":"Load","text":"","category":"section"},{"location":"SpainLoaders/","page":"Loading Spain Buildings","title":"Loading Spain Buildings","text":"load_spain_processed_buildings","category":"page"},{"location":"SpainLoaders/#CompositeBuildings.load_spain_processed_buildings","page":"Loading Spain Buildings","title":"CompositeBuildings.load_spain_processed_buildings","text":"load_spain_processed_buildings(path; extent=nothing, floor_height=4.0)\n\nloads the files saved by preprocess_spain_subregion(...) from path/buildings.geojson and adds metadata for projection.\n\nUses floor_height to convert nFloor_overlap to building height.\n\nThe returned DataFrame fulfills the requirements to be used as a source for building data.\n\n\n\n\n\n","category":"function"},{"location":"OtherLoaders/#Other-Building-Loaders","page":"Loading Buildings","title":"Other Building Loaders","text":"","category":"section"},{"location":"OtherLoaders/#Introduction","page":"Loading Buildings","title":"Introduction","text":"","category":"section"},{"location":"OtherLoaders/","page":"Loading Buildings","title":"Loading Buildings","text":"Here we compile a list of convenience functions which load building footprints from different sources and prepare them for shadow casting.","category":"page"},{"location":"OtherLoaders/","page":"Loading Buildings","title":"Loading Buildings","text":"The returned DataFrames conform to the requirements needed to be a source for building data.","category":"page"},{"location":"OtherLoaders/#API","page":"Loading Buildings","title":"API","text":"","category":"section"},{"location":"OtherLoaders/","page":"Loading Buildings","title":"Loading Buildings","text":"Pages = [\"OtherLoaders.md\"]","category":"page"},{"location":"OtherLoaders/","page":"Loading Buildings","title":"Loading Buildings","text":"Modules = [CompositeBuildings]\nPages = [\"OtherLoaders.jl\"]","category":"page"},{"location":"OtherLoaders/#CompositeBuildings.load_british_shapefiles-Tuple{Any}","page":"Loading Buildings","title":"CompositeBuildings.load_british_shapefiles","text":"load_british_shapefiles(path; extent=nothing)\n\nloads the shapefiles of the largest cities in great britain, provided by emu analytics into a DataFrame.\n\narguments\n\npath: Path to the file with the dataset\nextent: Extents.Extent, specifying a clipping range for the Dataset. Use X for lon and Y for lat.\n\nReturns a dataframe with the columns given in the shapefile, with a few exceptions:\n\n:OBJECTID => :id\n:MEAN_mean => :height\n:MIN_min => :height_min\n:MAX_max => :height_max\n\nPolygons are stored in the geometry column in EPSG 4326 crs. Only rows where :height > 0 are returned.\n\nThe dataframe has a metadata tag observatory, containing the relevant center.\n\n\n\n\n\n","category":"method"},{"location":"OtherLoaders/#CompositeBuildings.load_new_york_shapefiles-Tuple{Any}","page":"Loading Buildings","title":"CompositeBuildings.load_new_york_shapefiles","text":"load_new_york_shapefiles(path; extent=nothing)\n\nloads the shapefiles containing building footprints and heights provided by the city of new york into a DataFrame.\n\narguments\n\npath: Path to the file with the dataset\nextent: Extents.Extent, specifying a clipping range for the Dataset. Use X for lon and Y for lat.\n\nReturns a dataframe with the columns given in the shapefile, only rows where heightroof is not missing and larger than 0 are returned. Polygons are stored in the geometry column in EPSG 4326 crs.\n\nThe dataframe conforms to the requirements needed to be a source for buildings.\n\n\n\n\n\n","category":"method"},{"location":"ShadowCasting/#Shadow-Casting","page":"Shadow Casting","title":"Shadow Casting","text":"","category":"section"},{"location":"ShadowCasting/#Introduction","page":"Shadow Casting","title":"Introduction","text":"","category":"section"},{"location":"ShadowCasting/","page":"Shadow Casting","title":"Shadow Casting","text":"For buildings, we assume blocks of constant height across their footprint. The footprint is extruded upwards to this constant height and then projected onto the plane.","category":"page"},{"location":"ShadowCasting/","page":"Shadow Casting","title":"Shadow Casting","text":"(Image: Schematic of shadowcasting for buildings)","category":"page"},{"location":"ShadowCasting/#API","page":"Shadow Casting","title":"API","text":"","category":"section"},{"location":"ShadowCasting/","page":"Shadow Casting","title":"Shadow Casting","text":"Pages = [\"ShadowCasting.md\"]","category":"page"},{"location":"ShadowCasting/","page":"Shadow Casting","title":"Shadow Casting","text":"Modules = [CompositeBuildings]\nPages = [\"ShadowCasting.jl\"]","category":"page"},{"location":"ShadowCasting/#CompositeBuildings.cast_shadow_explicit-Tuple{Any, Any}","page":"Shadow Casting","title":"CompositeBuildings.cast_shadow_explicit","text":"cast_shadow_explicit(points, offset_vector)\n\nTakes a vector of points describing a polygon and calculates the shadow (pushing each point along offset_vector), by explicitly constructing the rectangles and using ArchGDAL to get the unions. Exact for all polygons, but fairly slow.\n\n\n\n\n\n","category":"method"},{"location":"ShadowCasting/#CompositeBuildings.cast_shadows-Tuple{Any, Dates.DateTime}","page":"Shadow Casting","title":"CompositeBuildings.cast_shadows","text":"cast_shadows(buildings_df, time::DateTime)\ncast_shadows(buildings_df, sun_direction::AbstractVector)\n\ncreates new DataFrame with the shadows of the buildings in buildings_df.\n\narguments\n\nbuildings_df: DataFrame with metadata of observatory. Is assumend to fulfill the requirements for a building source.\ntime: Local DateTime for which the shadows shall be calculated. Or:\nsun_direction: unit vector pointing towards the sun in local coordinates (x east, y north, z up)\n\nreturns\n\nDataFrame with columns\n\nid: id of building\ngeometry: ArchGDAL polygon representing shadow of building with id in global coordinates\n\nand the same metadata as buildings_df.\n\n\n\n\n\n","category":"method"},{"location":"ShadowCasting/#CompositeBuildings.extrude_simple-Tuple{Any, Any, Any}","page":"Shadow Casting","title":"CompositeBuildings.extrude_simple","text":"extrude_simple(points, offset_vector, orthogonal_vector)\n\nTakes a vector of points describing a polygon and calculates the shadow (pushing each point along offset_vector), by fiddling around with the coordinates of the points. Works only for convex polygons, but is quite fast.\n\n\n\n\n\n","category":"method"},{"location":"ShadowCasting/#CompositeBuildings.shadow_cleanup-Tuple{Any}","page":"Shadow Casting","title":"CompositeBuildings.shadow_cleanup","text":"Sometimes, due to numerical errors, the resulting shadows are no longer of polygon type, but might contain some (usually very short) lines or points. This function removes these artefacts and returns only the polygon contained in the shadow.\n\nshadow_cleanup(shadow)\n\nentry function for cleanup. dispatches on geomtrait of shadow.\n\nshadow_cleanup(::PolygonTrait, shadow)\n\nreturns shadow as it is.\n\nshadow_cleanup(::GeometryCollectionTrait, shadow)\n\nreturns the polygon in the shadow. If there is more than on polygon, or if there is at least one multi polygon it throws an ArgumentError.\n\n\n\n\n\n","category":"method"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = CompositeBuildings","category":"page"},{"location":"#CompositeBuildings","page":"Home","title":"CompositeBuildings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for CompositeBuildings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides functions to load various datasets containing building data into consistents DataFrames.DataFrames.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It as well provides the functionality to calculate shadows from these datasets.","category":"page"},{"location":"#Interface","page":"Home","title":"Interface","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To properly work within the MinistryOfCoolWalks ecosystem, we expect the dataframes to follow a certain set of requirements:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each row in the DataFrame represents a single building\nEach DataFrame must have the following columns:\n:id unique id of the building\n:height height of building (m)\n:geometry ArchGDAL polygon (single polygon, possibly with holes), with spatial reference applied.\nThe DataFrame must have metadata with a key of observatory, which contains a CoolWalksUtils.ShadowObservatory. This value contains the center coordinates used for projection to a local coordinate system and the timezone of the dataset, used to calculate the sunposition, for shadow projection.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The technical part of the last two of these requirements can be checked with CompositeBuildings.check_building_dataframe_integrity(df).","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"index.md\"]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [CompositeBuildings]\nPages = [\"CompositeBuildings.jl\"]","category":"page"},{"location":"#CompositeBuildings.check_building_dataframe_integrity-Tuple{Any}","page":"Home","title":"CompositeBuildings.check_building_dataframe_integrity","text":"check_building_dataframe_integrity(df)\n\nChecks if df conforms to the technical requirements needed to be considered as a source for building data.\n\n\n\n\n\n","category":"method"},{"location":"#CompositeBuildings.convex_report-Tuple{Any}","page":"Home","title":"CompositeBuildings.convex_report","text":"convex_report(df)\n\nLittle utility to log how many of the entries indf.geometry` are convex.\n\n\n\n\n\n","category":"method"}]
}
